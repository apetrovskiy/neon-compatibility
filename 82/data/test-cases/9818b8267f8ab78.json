{
  "uid" : "9818b8267f8ab78",
  "name" : "test_contracts[input_data0]",
  "fullName" : "tests.openzeppelin.test_openzeppelin#test_contracts",
  "historyId" : "645bc649ec39068f8479f87dfb6007e3",
  "time" : {
    "start" : 1631817252884,
    "stop" : 1631817252886,
    "duration" : 2
  },
  "status" : "broken",
  "statusMessage" : "FileNotFoundError: [Errno 2] No such file or directory: '/home/runner/work/neon-compatibility/neon-compatibility/OpenZeppelin/source/contracts/IAccessControl.sol'",
  "statusTrace" : "input_data = InputData(test_file='access/Ownable.test.js', test_files=['access/Ownable.test.js'], contracts=['access/Ownable.sol', ...sol', 'access/AccessControl.sol', 'utils/Context.sol', 'IAccessControl.sol'], migration_script='2_deploy_contracts.js')\n\n    @pytest.mark.parametrize(\"input_data\", INPUT_DATA)\n    def test_contracts(input_data: InputData):\n        # print(input_data)\n>       copy_files(input_data)\n\ntests/openzeppelin/test_openzeppelin.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/openzeppelin/test_openzeppelin.py:79: in copy_files\n    [\ntests/openzeppelin/test_openzeppelin.py:80: in <listcomp>\n    copy(get_source_contracts_path() + x, get_contracts_path())\n/opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/shutil.py:418: in copy\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsrc = '/home/runner/work/neon-compatibility/neon-compatibility/OpenZeppelin/source/contracts/IAccessControl.sol'\ndst = '/home/runner/work/neon-compatibility/neon-compatibility/OpenZeppelin/contracts/IAccessControl.sol'\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc, open(dst, 'wb') as fdst:\nE           FileNotFoundError: [Errno 2] No such file or directory: '/home/runner/work/neon-compatibility/neon-compatibility/OpenZeppelin/source/contracts/IAccessControl.sol'\n\n/opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/shutil.py:264: FileNotFoundError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "prepare_truffle_config",
    "time" : {
      "start" : 1631817252871,
      "stop" : 1631817252883,
      "duration" : 12
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "prepare_truffle_config::0",
    "time" : {
      "start" : 1631817252997,
      "stop" : 1631817252997,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests.openzeppelin"
  }, {
    "name" : "suite",
    "value" : "test_openzeppelin"
  }, {
    "name" : "host",
    "value" : "fv-az39-480"
  }, {
    "name" : "thread",
    "value" : "4131-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.openzeppelin.test_openzeppelin"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "input_data",
    "value" : "InputData(test_file='access/Ownable.test.js', test_files=['access/Ownable.test.js'], contracts=['access/Ownable.sol', 'mocks/OwnableMock.sol', 'mocks/AccessControlMock.sol', 'mocks/AccessControlEnumerableMock.sol', 'access/AccessControlEnumerable.sol', 'access/IAccessControlEnumerable.sol', 'utils/structs/EnumerableSet.sol', 'access/AccessControl.sol', 'utils/Context.sol', 'IAccessControl.sol'], migration_script='2_deploy_contracts.js')"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "9818b8267f8ab78.json",
  "parameterValues" : [ "InputData(test_file='access/Ownable.test.js', test_files=['access/Ownable.test.js'], contracts=['access/Ownable.sol', 'mocks/OwnableMock.sol', 'mocks/AccessControlMock.sol', 'mocks/AccessControlEnumerableMock.sol', 'access/AccessControlEnumerable.sol', 'access/IAccessControlEnumerable.sol', 'utils/structs/EnumerableSet.sol', 'access/AccessControl.sol', 'utils/Context.sol', 'IAccessControl.sol'], migration_script='2_deploy_contracts.js')" ]
}