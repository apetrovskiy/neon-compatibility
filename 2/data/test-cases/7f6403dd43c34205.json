{
  "uid" : "7f6403dd43c34205",
  "name" : "returns proxyAdmin as admin of the proxy",
  "fullName" : "Contract: ProxyAdmin #getProxyAdmin.returns proxyAdmin as admin of the proxy",
  "historyId" : "c14615b67009bd967ff2fae95342b10b",
  "time" : {
    "start" : 1637676723597,
    "stop" : 1637676732853,
    "duration" : 9256
  },
  "description" : "",
  "descriptionHtml" : "",
  "status" : "broken",
  "statusMessage" : "Returned error: HTTPConnectionPool(host='test-solana', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f437ff29970>: Failed to establish a new connection: [Errno 99] Cannot assign requested address'))",
  "statusTrace" : "Error: Returned error: HTTPConnectionPool(host='test-solana', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f437ff29970>: Failed to establish a new connection: [Errno 99] Cannot assign requested address'))\n                    at Context.<anonymous> (test/proxy/transparent/ProxyAdmin.test.js:21:55)\n                    at runMicrotasks (<anonymous>)\n                    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "OpenZeppelin contracts"
  }, {
    "name" : "suite",
    "value" : "Contract: ProxyAdmin #getProxyAdmin"
  }, {
    "name" : "testClass",
    "value" : "Contract: ProxyAdmin #getProxyAdmin"
  }, {
    "name" : "testMethod",
    "value" : "returns proxyAdmin as admin of the proxy"
  }, {
    "name" : "package",
    "value" : "Contract: ProxyAdmin #getProxyAdmin"
  }, {
    "name" : "resultFormat",
    "value" : "allure1"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 4,
        "unknown" : 0,
        "total" : 5
      },
      "items" : [ {
        "uid" : "a6a0540f75ee735b",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/21//#testresult/a6a0540f75ee735b",
        "status" : "passed",
        "time" : {
          "start" : 1637667969972,
          "stop" : 1637668007446,
          "duration" : 37474
        }
      }, {
        "uid" : "9f62ed5663210e03",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/22//#testresult/9f62ed5663210e03",
        "status" : "passed",
        "time" : {
          "start" : 1637666991846,
          "stop" : 1637667001490,
          "duration" : 9644
        }
      }, {
        "uid" : "49e9d9bd340a6da8",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/20//#testresult/49e9d9bd340a6da8",
        "status" : "passed",
        "time" : {
          "start" : 1637662510115,
          "stop" : 1637662519712,
          "duration" : 9597
        }
      }, {
        "uid" : "65a4f52b3675d648",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/16//#testresult/65a4f52b3675d648",
        "status" : "passed",
        "time" : {
          "start" : 1637334884594,
          "stop" : 1637334894498,
          "duration" : 9904
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "7f6403dd43c34205.json",
  "parameterValues" : [ ]
}