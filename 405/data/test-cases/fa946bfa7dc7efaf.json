{
  "uid" : "fa946bfa7dc7efaf",
  "name" : "test_brownie_deploy",
  "fullName" : "tests.brownie.test_brownie#test_brownie_deploy",
  "historyId" : "6e83a925951bfd8b9c39b6ea82974dc9",
  "time" : {
    "start" : 1651635339477,
    "stop" : 1651635339941,
    "duration" : 464
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: http://proxy.night.stand.neontest.xyz/solana",
  "statusTrace" : "brownie_project = <Project 'TokenProject'>\n\n    def test_brownie_deploy(brownie_project):\n>       deployed_contract = brownie_project.Token.deploy(\n            \"Test deploy\", \"TST\", 10, 10000000, {\"from\": accounts[0]}\n        )\n\ntests/brownie/test_brownie.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:600: in __call__\n    return tx[\"from\"].deploy(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:508: in deploy\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:718: in _make_transaction\n    gas_price, gas_strategy, gas_iter = self._gas_price(gas_price)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:454: in _gas_price\n    return web3.eth.generate_gas_price(), None, None\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/eth.py:846: in generate_gas_price\n    return self._generate_gas_price(transaction_params)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/eth.py:155: in _generate_gas_price\n    return self.gasPriceStrategy(self.web3, transaction_params)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/gas_strategies/rpc.py:20: in rpc_gas_price_strategy\n    return web3.manager.request_blocking(RPC.eth_gasPrice, [])\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/manager.py:186: in request_blocking\n    response = self._make_request(method, params)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/manager.py:147: in _make_request\n    return request_func(method, params)\ncytoolz/functoolz.pyx:250: in cytoolz.functoolz.curry.__call__\n    ???\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/middleware/formatting.py:76: in apply_formatters\n    response = make_request(method, params)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/middleware/gas_price_strategy.py:90: in middleware\n    return make_request(method, params)\ncytoolz/functoolz.pyx:250: in cytoolz.functoolz.curry.__call__\n    ???\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/middleware/formatting.py:76: in apply_formatters\n    response = make_request(method, params)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/middleware/attrdict.py:33: in middleware\n    response = make_request(method, params)\ncytoolz/functoolz.pyx:250: in cytoolz.functoolz.curry.__call__\n    ???\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/middleware/formatting.py:76: in apply_formatters\n    response = make_request(method, params)\ncytoolz/functoolz.pyx:250: in cytoolz.functoolz.curry.__call__\n    ???\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/middleware/formatting.py:76: in apply_formatters\n    response = make_request(method, params)\ncytoolz/functoolz.pyx:250: in cytoolz.functoolz.curry.__call__\n    ???\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/middleware/formatting.py:76: in apply_formatters\n    response = make_request(method, params)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/middleware/buffered_gas_estimate.py:40: in middleware\n    return make_request(method, params)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/middleware/exception_retry_request.py:105: in middleware\n    return make_request(method, params)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/providers/rpc.py:88: in make_request\n    raw_response = make_post_request(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/_utils/request.py:49: in make_post_request\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode('utf-8')\n            except UnicodeDecodeError:\n                reason = self.reason.decode('iso-8859-1')\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: http://proxy.night.stand.neontest.xyz/solana\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/requests/models.py:953: HTTPError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1651635321978,
      "stop" : 1651635321978,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1651635322839,
      "stop" : 1651635339476,
      "duration" : 16637
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: http://proxy.night.stand.neontest.xyz/solana",
    "statusTrace" : "brownie_project = <Project 'TokenProject'>\n\n    def test_brownie_deploy(brownie_project):\n>       deployed_contract = brownie_project.Token.deploy(\n            \"Test deploy\", \"TST\", 10, 10000000, {\"from\": accounts[0]}\n        )\n\ntests/brownie/test_brownie.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:600: in __call__\n    return tx[\"from\"].deploy(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:508: in deploy\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:718: in _make_transaction\n    gas_price, gas_strategy, gas_iter = self._gas_price(gas_price)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:454: in _gas_price\n    return web3.eth.generate_gas_price(), None, None\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/eth.py:846: in generate_gas_price\n    return self._generate_gas_price(transaction_params)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/eth.py:155: in _generate_gas_price\n    return self.gasPriceStrategy(self.web3, transaction_params)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/gas_strategies/rpc.py:20: in rpc_gas_price_strategy\n    return web3.manager.request_blocking(RPC.eth_gasPrice, [])\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/manager.py:186: in request_blocking\n    response = self._make_request(method, params)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/manager.py:147: in _make_request\n    return request_func(method, params)\ncytoolz/functoolz.pyx:250: in cytoolz.functoolz.curry.__call__\n    ???\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/middleware/formatting.py:76: in apply_formatters\n    response = make_request(method, params)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/middleware/gas_price_strategy.py:90: in middleware\n    return make_request(method, params)\ncytoolz/functoolz.pyx:250: in cytoolz.functoolz.curry.__call__\n    ???\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/middleware/formatting.py:76: in apply_formatters\n    response = make_request(method, params)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/middleware/attrdict.py:33: in middleware\n    response = make_request(method, params)\ncytoolz/functoolz.pyx:250: in cytoolz.functoolz.curry.__call__\n    ???\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/middleware/formatting.py:76: in apply_formatters\n    response = make_request(method, params)\ncytoolz/functoolz.pyx:250: in cytoolz.functoolz.curry.__call__\n    ???\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/middleware/formatting.py:76: in apply_formatters\n    response = make_request(method, params)\ncytoolz/functoolz.pyx:250: in cytoolz.functoolz.curry.__call__\n    ???\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/middleware/formatting.py:76: in apply_formatters\n    response = make_request(method, params)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/middleware/buffered_gas_estimate.py:40: in middleware\n    return make_request(method, params)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/middleware/exception_retry_request.py:105: in middleware\n    return make_request(method, params)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/providers/rpc.py:88: in make_request\n    raw_response = make_post_request(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/web3/_utils/request.py:49: in make_post_request\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>\n\n    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n    \n        http_error_msg = ''\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode('utf-8')\n            except UnicodeDecodeError:\n                reason = self.reason.decode('iso-8859-1')\n        else:\n            reason = self.reason\n    \n        if 400 <= self.status_code < 500:\n            http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n    \n        elif 500 <= self.status_code < 600:\n            http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n    \n        if http_error_msg:\n>           raise HTTPError(http_error_msg, response=self)\nE           requests.exceptions.HTTPError: 502 Server Error: Bad Gateway for url: http://proxy.night.stand.neontest.xyz/solana\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/requests/models.py:953: HTTPError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f3973cc6911ca830",
      "name" : "log",
      "source" : "f3973cc6911ca830.txt",
      "type" : "text/plain",
      "size" : 287
    }, {
      "uid" : "9f21d8c4c40859b1",
      "name" : "stdout",
      "source" : "9f21d8c4c40859b1.txt",
      "type" : "text/plain",
      "size" : 256
    }, {
      "uid" : "f734afb03ba45baa",
      "name" : "stderr",
      "source" : "f734afb03ba45baa.txt",
      "type" : "text/plain",
      "size" : 8880
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie"
  }, {
    "name" : "suite",
    "value" : "test_brownie"
  }, {
    "name" : "host",
    "value" : "fv-az190-793"
  }, {
    "name" : "thread",
    "value" : "3652-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.test_brownie"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 80,
        "skipped" : 0,
        "passed" : 51,
        "unknown" : 0,
        "total" : 131
      },
      "items" : [ {
        "uid" : "9df1a8edc29875ec",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/402//#testresult/9df1a8edc29875ec",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0xf074679eeaf07f339451ad851343b950fdad952b have 0 want 17914859951742600000",
        "time" : {
          "start" : 1651537111552,
          "stop" : 1651537112696,
          "duration" : 1144
        }
      }, {
        "uid" : "fc705af5467b2ee3",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/401//#testresult/fc705af5467b2ee3",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0x72aa0d6dde97e4db07292d56cf6e116d4517bcda have 0 want 18319686582997800000",
        "time" : {
          "start" : 1651463326572,
          "stop" : 1651463328043,
          "duration" : 1471
        }
      }, {
        "uid" : "e85ab2efd04a4bf0",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/398//#testresult/e85ab2efd04a4bf0",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0x049e435147493f3404bc86643617973b6c07ca06 have 0 want 17404965190526760000",
        "time" : {
          "start" : 1651364565932,
          "stop" : 1651364567851,
          "duration" : 1919
        }
      }, {
        "uid" : "f7769f6410db4734",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/397//#testresult/f7769f6410db4734",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0xb0fc43ec7160e64a14e31b9f338f7eeb25f51de9 have 0 want 19277629500360000000",
        "time" : {
          "start" : 1651289415869,
          "stop" : 1651289417270,
          "duration" : 1401
        }
      }, {
        "uid" : "198646760b41609",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/395//#testresult/198646760b41609",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0xf9ad56b87fa3507d37d1bffb51f078daff11f22d have 0 want 19935304897200000000",
        "time" : {
          "start" : 1651203443410,
          "stop" : 1651203444805,
          "duration" : 1395
        }
      }, {
        "uid" : "ad7286471cb5e6f3",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/392//#testresult/ad7286471cb5e6f3",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0x9f2398941df2ad467cdf610817f8ccb33f264805 have 0 want 3163388322900000000",
        "time" : {
          "start" : 1651105358595,
          "stop" : 1651105360627,
          "duration" : 2032
        }
      }, {
        "uid" : "e790d8f2a68e9f23",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/390//#testresult/e790d8f2a68e9f23",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0x8887cab5311d83d279c30c994c46b3c71ccf5388 have 0 want 3098615371800000000",
        "time" : {
          "start" : 1651018893967,
          "stop" : 1651018895388,
          "duration" : 1421
        }
      }, {
        "uid" : "3f54f798f471566d",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/389//#testresult/3f54f798f471566d",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0xabfd592368779aed12ce8b3727f4cdaacc650846 have 0 want 3257083566289800000",
        "time" : {
          "start" : 1650944112838,
          "stop" : 1650944114898,
          "duration" : 2060
        }
      }, {
        "uid" : "91a6544029820fd5",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/387//#testresult/91a6544029820fd5",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0x9b32b66cd80021595cd6c5ab45f416d15b7e3146 have 0 want 3156370581000000000",
        "time" : {
          "start" : 1650857442593,
          "stop" : 1650857443551,
          "duration" : 958
        }
      }, {
        "uid" : "97e4f84573409a9",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/382//#testresult/97e4f84573409a9",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0x0736220dfadbf58fd6b2fbdc4018ced2d2dbb909 have 0 want 3251161560090600000",
        "time" : {
          "start" : 1650673051261,
          "stop" : 1650673054840,
          "duration" : 3579
        }
      }, {
        "uid" : "de1829bae4ba8e66",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/380//#testresult/de1829bae4ba8e66",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0x04ed956eb67d56797a69e6004b2dd4c947e530ac have 0 want 3297048073800000000",
        "time" : {
          "start" : 1650586912199,
          "stop" : 1650586913566,
          "duration" : 1367
        }
      }, {
        "uid" : "7409572ee2d94a14",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/378//#testresult/7409572ee2d94a14",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0x7e66015bd488b1c206676f5377b6466357c27b1b have 0 want 3416672663554800000",
        "time" : {
          "start" : 1650500460329,
          "stop" : 1650500461291,
          "duration" : 962
        }
      }, {
        "uid" : "49ca4a426b53d56e",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/376//#testresult/49ca4a426b53d56e",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0x2581f6fccdc55c44ee1ce96e602323d2388e395f have 0 want 3520413764142600000",
        "time" : {
          "start" : 1650413976652,
          "stop" : 1650413978115,
          "duration" : 1463
        }
      }, {
        "uid" : "395fd092e5b3e39d",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/375//#testresult/395fd092e5b3e39d",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0xacdbc5ccad974225dc403edb7b46882a26bd609b have 0 want 3256071075527400000",
        "time" : {
          "start" : 1650339500017,
          "stop" : 1650339502029,
          "duration" : 2012
        }
      }, {
        "uid" : "99f2fd94ec93a8d5",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/373//#testresult/99f2fd94ec93a8d5",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0xb64e47a494c7ff5ea9aad99c867a2f8d74cd8c24 have 0 want 3256071075527400000",
        "time" : {
          "start" : 1650252591069,
          "stop" : 1650252592451,
          "duration" : 1382
        }
      }, {
        "uid" : "6a4106feeea8644b",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/371//#testresult/6a4106feeea8644b",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0x46db0e4a846473dcfbb91fcf2c4f235f2491d2ca have 0 want 3275563619959800000",
        "time" : {
          "start" : 1650165630516,
          "stop" : 1650165631891,
          "duration" : 1375
        }
      }, {
        "uid" : "55046c58ecd3c4e",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/369//#testresult/55046c58ecd3c4e",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0xc081e3364d1204710015febe7347e7671c7d177d have 0 want 3261295502049000000",
        "time" : {
          "start" : 1650079124365,
          "stop" : 1650079126315,
          "duration" : 1950
        }
      }, {
        "uid" : "eadfeaf9d6330b5c",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/367//#testresult/eadfeaf9d6330b5c",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0xb778c97b9bd2913dc232e0c1884c14540af4bc8b have 0 want 3269132625813600000",
        "time" : {
          "start" : 1649993839539,
          "stop" : 1649993841236,
          "duration" : 1697
        }
      }, {
        "uid" : "a4ff58b83c32bf46",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/364//#testresult/a4ff58b83c32bf46",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0x5cb31e64acd9eaec0c7a412b3a0b148d1b2c1e2e have 0 want 3380622604078200000",
        "time" : {
          "start" : 1649895515432,
          "stop" : 1649895516959,
          "duration" : 1527
        }
      }, {
        "uid" : "6f811fa4c2d8ffb8",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/363//#testresult/6f811fa4c2d8ffb8",
        "status" : "broken",
        "statusDetails" : "ValueError: insufficient funds for gas * price + value: address 0x1387c1fbc4e33386a1f5b69e6a897cd448b1a649 have 0 want 3386771436601800000",
        "time" : {
          "start" : 1649820225837,
          "stop" : 1649820227242,
          "duration" : 1405
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "fa946bfa7dc7efaf.json",
  "parameterValues" : [ ]
}