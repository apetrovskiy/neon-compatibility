{
  "uid" : "e82c6caf5520f920",
  "name" : "test_transfer_zero_tokens_without_approval",
  "fullName" : "tests.brownie.token.tests.test_transferFrom#test_transfer_zero_tokens_without_approval",
  "historyId" : "8dca4b5cc80f723e5acea8426c32b8c6",
  "time" : {
    "start" : 1640661049111,
    "stop" : 1640661049625,
    "duration" : 514
  },
  "status" : "broken",
  "statusMessage" : "ValueError: Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f89b309f910>: Failed to establish a new connection: [Errno 99] Cannot assign requested address'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.",
  "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7f29409f0520>\ntoken = <Token Contract '0x1b753C42fE4c96244A84E631424Eef1bfdE57290'>\n\n    def test_transfer_zero_tokens_without_approval(accounts, token):\n        sender_balance = token.balanceOf(accounts[0])\n        receiver_balance = token.balanceOf(accounts[2])\n    \n>       token.transferFrom(accounts[0], accounts[2], 0, {'from': accounts[1]})\n\ntests/brownie/token/tests/test_transferFrom.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:725: in _make_transaction\n    raise VirtualMachineError(e) from None\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = VirtualMachineError(ValueError(\"Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries ex...ted address'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"))\nexc = \"Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by N...ested address'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\"\n\n    def __init__(self, exc: ValueError) -> None:\n        try:\n            exc = exc.args[0]\n        except Exception:\n            pass\n    \n        if isinstance(exc, dict) and \"message\" in exc:\n            if \"data\" not in exc:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.message: str = exc[\"message\"].rstrip(\".\")\n    \n            if isinstance(exc[\"data\"], str):\n                # handle parity exceptions - this logic probably is not perfect\n                if \"0x08c379a0\" in exc[\"data\"]:\n                    revert_type, err_msg = [i.strip() for i in exc[\"data\"].split(\"0x08c379a0\", 1)]\n                    err_msg = eth_abi.decode_abi([\"string\"], HexBytes(err_msg))\n                    err_msg = f\"{revert_type} '{err_msg}'\"\n                elif exc[\"data\"].endswith(\"0x\"):\n                    err_msg = exc[\"data\"][:-2].strip()\n                else:\n                    err_msg = exc[\"data\"]\n                raise ValueError(f\"{self.message}: {err_msg}\") from None\n    \n            try:\n                txid, data = next((k, v) for k, v in exc[\"data\"].items() if k.startswith(\"0x\"))\n            except StopIteration:\n                raise ValueError(exc[\"message\"]) from None\n    \n            self.txid: str = txid\n            self.source: str = \"\"\n            self.revert_type: str = data[\"error\"]\n            self.pc: Optional[str] = data.get(\"program_counter\")\n            if self.pc and self.revert_type == \"revert\":\n                self.pc -= 1\n    \n            self.revert_msg: Optional[str] = data.get(\"reason\")\n            self.dev_revert_msg = brownie.project.build._get_dev_revert(self.pc)\n            if self.revert_msg is None and self.revert_type in (\"revert\", \"invalid opcode\"):\n                self.revert_msg = self.dev_revert_msg\n            elif self.revert_msg == \"Failed assertion\":\n                self.revert_msg = self.dev_revert_msg or self.revert_msg\n    \n        else:\n>           raise ValueError(str(exc)) from None\nE           ValueError: Gas estimation failed: 'HTTPConnectionPool(host='10.2.0.2', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f89b309f910>: Failed to establish a new connection: [Errno 99] Cannot assign requested address'))'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/exceptions.py:121: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : true,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1640660961111,
      "stop" : 1640660961112,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1640660962120,
      "stop" : 1640660978947,
      "duration" : 16827
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "accounts",
    "time" : {
      "start" : 1640660982316,
      "stop" : 1640660982653,
      "duration" : 337
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_env",
    "time" : {
      "start" : 1640660982316,
      "stop" : 1640660982316,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "token",
    "time" : {
      "start" : 1640661018534,
      "stop" : 1640661021315,
      "duration" : 2781
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "accounts::0",
    "time" : {
      "start" : 1640661213652,
      "stop" : 1640661213652,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_transferFrom"
  }, {
    "name" : "host",
    "value" : "fv-az190-768"
  }, {
    "name" : "thread",
    "value" : "3848-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_transferFrom"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 8,
        "unknown" : 0,
        "total" : 9
      },
      "items" : [ {
        "uid" : "bf4d93b761a945fd",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/149//#testresult/bf4d93b761a945fd",
        "status" : "passed",
        "time" : {
          "start" : 1640574652989,
          "stop" : 1640574656073,
          "duration" : 3084
        }
      }, {
        "uid" : "52d48fd5d991a1c5",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/147//#testresult/52d48fd5d991a1c5",
        "status" : "passed",
        "time" : {
          "start" : 1640488324968,
          "stop" : 1640488327863,
          "duration" : 2895
        }
      }, {
        "uid" : "ff0adebff6c30b88",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/145//#testresult/ff0adebff6c30b88",
        "status" : "passed",
        "time" : {
          "start" : 1640401936296,
          "stop" : 1640401940076,
          "duration" : 3780
        }
      }, {
        "uid" : "81083593eff67964",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/132//#testresult/81083593eff67964",
        "status" : "passed",
        "time" : {
          "start" : 1640218749992,
          "stop" : 1640218752133,
          "duration" : 2141
        }
      }, {
        "uid" : "3f4c4edf26419ae2",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/129//#testresult/3f4c4edf26419ae2",
        "status" : "passed",
        "time" : {
          "start" : 1640200345602,
          "stop" : 1640200348521,
          "duration" : 2919
        }
      }, {
        "uid" : "f435a8fa4b54f283",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/125//#testresult/f435a8fa4b54f283",
        "status" : "passed",
        "time" : {
          "start" : 1640195018018,
          "stop" : 1640195019892,
          "duration" : 1874
        }
      }, {
        "uid" : "72ed898cd83806d1",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/121//#testresult/72ed898cd83806d1",
        "status" : "passed",
        "time" : {
          "start" : 1640194166546,
          "stop" : 1640194169094,
          "duration" : 2548
        }
      }, {
        "uid" : "313048bc87376695",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/120//#testresult/313048bc87376695",
        "status" : "passed",
        "time" : {
          "start" : 1640194144272,
          "stop" : 1640194147082,
          "duration" : 2810
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "e82c6caf5520f920.json",
  "parameterValues" : [ ]
}