{
  "uid" : "bded644dab9c9a92",
  "name" : "test_approval_event_fires",
  "fullName" : "tests.brownie.token.tests.test_approve#test_approval_event_fires",
  "historyId" : "5df85ed43d4eaa83ff87d3ee54c0ba22",
  "time" : {
    "start" : 1640106129995,
    "stop" : 1640106132935,
    "duration" : 2940
  },
  "status" : "broken",
  "statusMessage" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x4e55b1098eb54001080aef56bf99ff3f5478c7dac9c2e3a8f9bfc872c52a89e0",
  "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7f7720121100>\ntoken = <Token Contract '0x3Dec6DaE242a73013B4Fc17DaD56A763cc659ea3'>\n\n    def test_approval_event_fires(accounts, token):\n>       tx = token.approve(accounts[1], 10**19, {'from': accounts[0]})\n\ntests/brownie/token/tests/test_approve.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:758: in _make_transaction\n    receipt = self._await_confirmation(receipt, required_confs, gas_strategy, gas_iter)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LocalAccount '0xC9B8cB2DD4e0069a33cE093C63aA735989E3d14D'>\nreceipt = <Transaction '\u001B[0;2;37m0x4e55b1098eb54001080aef56bf99ff3f5478c7dac9c2e3a8f9bfc872c52a89e0\u001B[0;m'>\nrequired_confs = 1, gas_strategy = None, gas_iter = None\n\n    def _await_confirmation(\n        self,\n        receipt: TransactionReceipt,\n        required_confs: int,\n        gas_strategy: Optional[GasABC],\n        gas_iter: Optional[Iterator],\n    ) -> TransactionReceipt:\n        # add to TxHistory before waiting for confirmation, this way the tx\n        # object is available if the user exits blocking via keyboard interrupt\n        history._add_tx(receipt)\n    \n        if gas_strategy is not None:\n            gas_strategy.run(receipt, gas_iter)  # type: ignore\n    \n        if required_confs == 0:\n            # set 0-conf tx's as silent to hide the confirmation output\n            receipt._silent = True\n            return receipt\n    \n        try:\n            receipt._confirmed.wait()\n        except KeyboardInterrupt as exc:\n            # set related transactions as silent\n            receipt._silent = True\n            for receipt in history.filter(\n                sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n            ):\n                receipt._silent = True\n            raise exc.with_traceback(None)\n    \n        if receipt.status != -2:\n            return receipt\n    \n        # if transaction was dropped (status -2), find and return the tx that confirmed\n        replacements = history.filter(\n            sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n        )\n        while True:\n            if not replacements:\n>               raise TransactionError(f\"Tx dropped without known replacement: {receipt.txid}\")\nE               brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x4e55b1098eb54001080aef56bf99ff3f5478c7dac9c2e3a8f9bfc872c52a89e0\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:800: TransactionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "configure_neon_network",
    "time" : {
      "start" : 1640106091831,
      "stop" : 1640106091831,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "brownie_project",
    "time" : {
      "start" : 1640106092835,
      "stop" : 1640106107949,
      "duration" : 15114
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_env",
    "time" : {
      "start" : 1640106113590,
      "stop" : 1640106113590,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "accounts",
    "time" : {
      "start" : 1640106113591,
      "stop" : 1640106113858,
      "duration" : 267
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "token",
    "time" : {
      "start" : 1640106113858,
      "stop" : 1640106117561,
      "duration" : 3703
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x4e55b1098eb54001080aef56bf99ff3f5478c7dac9c2e3a8f9bfc872c52a89e0",
    "statusTrace" : "accounts = <brownie.network.account.Accounts object at 0x7f7720121100>\ntoken = <Token Contract '0x3Dec6DaE242a73013B4Fc17DaD56A763cc659ea3'>\n\n    def test_approval_event_fires(accounts, token):\n>       tx = token.approve(accounts[1], 10**19, {'from': accounts[0]})\n\ntests/brownie/token/tests/test_approve.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1693: in __call__\n    return self.transact(*args)\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/contract.py:1566: in transact\n    return tx[\"from\"].transfer(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:642: in transfer\n    receipt, exc = self._make_transaction(\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:758: in _make_transaction\n    receipt = self._await_confirmation(receipt, required_confs, gas_strategy, gas_iter)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <LocalAccount '0xC9B8cB2DD4e0069a33cE093C63aA735989E3d14D'>\nreceipt = <Transaction '\u001B[0;2;37m0x4e55b1098eb54001080aef56bf99ff3f5478c7dac9c2e3a8f9bfc872c52a89e0\u001B[0;m'>\nrequired_confs = 1, gas_strategy = None, gas_iter = None\n\n    def _await_confirmation(\n        self,\n        receipt: TransactionReceipt,\n        required_confs: int,\n        gas_strategy: Optional[GasABC],\n        gas_iter: Optional[Iterator],\n    ) -> TransactionReceipt:\n        # add to TxHistory before waiting for confirmation, this way the tx\n        # object is available if the user exits blocking via keyboard interrupt\n        history._add_tx(receipt)\n    \n        if gas_strategy is not None:\n            gas_strategy.run(receipt, gas_iter)  # type: ignore\n    \n        if required_confs == 0:\n            # set 0-conf tx's as silent to hide the confirmation output\n            receipt._silent = True\n            return receipt\n    \n        try:\n            receipt._confirmed.wait()\n        except KeyboardInterrupt as exc:\n            # set related transactions as silent\n            receipt._silent = True\n            for receipt in history.filter(\n                sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n            ):\n                receipt._silent = True\n            raise exc.with_traceback(None)\n    \n        if receipt.status != -2:\n            return receipt\n    \n        # if transaction was dropped (status -2), find and return the tx that confirmed\n        replacements = history.filter(\n            sender=self, nonce=receipt.nonce, key=lambda k: k.status != -2\n        )\n        while True:\n            if not replacements:\n>               raise TransactionError(f\"Tx dropped without known replacement: {receipt.txid}\")\nE               brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x4e55b1098eb54001080aef56bf99ff3f5478c7dac9c2e3a8f9bfc872c52a89e0\n\n../../../.local/share/virtualenvs/neon-compatibility-g882AfFF/lib/python3.8/site-packages/brownie/network/account.py:800: TransactionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "2738002529080bd2",
      "name" : "stdout",
      "source" : "2738002529080bd2.txt",
      "type" : "text/plain",
      "size" : 237
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "accounts::0",
    "time" : {
      "start" : 1640106358052,
      "stop" : 1640106358052,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Brownie"
  }, {
    "name" : "parentSuite",
    "value" : "tests.brownie.token.tests"
  }, {
    "name" : "suite",
    "value" : "test_approve"
  }, {
    "name" : "host",
    "value" : "fv-az196-256"
  }, {
    "name" : "thread",
    "value" : "3701-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.brownie.token.tests.test_approve"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 6,
        "skipped" : 0,
        "passed" : 2,
        "unknown" : 0,
        "total" : 8
      },
      "items" : [ {
        "uid" : "3aac0ee65c3802da",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/teststand/feature/154-support-for-faucet-(testStand)/101//#testresult/3aac0ee65c3802da",
        "status" : "broken",
        "statusDetails" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xf7ee6fe7d7f3b2bb9d84576258a6c167dbf5939dc5bb12119f1d668610cbf2d9",
        "time" : {
          "start" : 1640104661911,
          "stop" : 1640104661911,
          "duration" : 0
        }
      }, {
        "uid" : "bda94c34eac6715e",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/teststand/feature/154-support-for-faucet-(testStand)/99//#testresult/bda94c34eac6715e",
        "status" : "passed",
        "time" : {
          "start" : 1640101855517,
          "stop" : 1640101857576,
          "duration" : 2059
        }
      }, {
        "uid" : "28f3f8185752a489",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/teststand/feature/154-support-for-faucet-(testStand)/97//#testresult/28f3f8185752a489",
        "status" : "passed",
        "time" : {
          "start" : 1640099708765,
          "stop" : 1640099710212,
          "duration" : 1447
        }
      }, {
        "uid" : "1e1ea7a84f0b16f6",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/teststand/feature/154-support-for-faucet-(testStand)/95//#testresult/1e1ea7a84f0b16f6",
        "status" : "broken",
        "statusDetails" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0xb3c578f0a73e46ba05cc346581031a5ba1f3f27d2142c55eb768526ab1df425a",
        "time" : {
          "start" : 1640097643827,
          "stop" : 1640097643827,
          "duration" : 0
        }
      }, {
        "uid" : "80c111f0fbd240da",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/teststand/feature/154-support-for-faucet-(testStand)/93//#testresult/80c111f0fbd240da",
        "status" : "broken",
        "statusDetails" : "brownie.exceptions.TransactionError: Tx dropped without known replacement: 0x0d3abda884d3c817c0c063f3295087235afb4e6cb03f4c8d0a6945fcaddc79bf",
        "time" : {
          "start" : 1640013367343,
          "stop" : 1640013369677,
          "duration" : 2334
        }
      }, {
        "uid" : "c8e966674364072e",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/teststand/feature/154-support-for-faucet-(testStand)/89//#testresult/c8e966674364072e",
        "status" : "broken",
        "statusDetails" : "ValueError: connection already closed",
        "time" : {
          "start" : 1639993302319,
          "stop" : 1639993302319,
          "duration" : 0
        }
      }, {
        "uid" : "3fdf422790ee815d",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/teststand/feature/154-support-for-faucet-(testStand)/83//#testresult/3fdf422790ee815d",
        "status" : "broken",
        "statusDetails" : "ValueError: connection already closed",
        "time" : {
          "start" : 1639909993411,
          "stop" : 1639909993411,
          "duration" : 0
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "bded644dab9c9a92.json",
  "parameterValues" : [ ]
}