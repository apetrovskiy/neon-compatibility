{
  "uid" : "e8ee8d2755ae2544",
  "name" : "burns the requested amount",
  "fullName" : "Contract: ERC20Burnable burnFrom on success for a zero amount.burns the requested amount",
  "historyId" : "7846cef3501f3e9bc829640728f1be0f",
  "time" : {
    "start" : 1637867848983,
    "stop" : 1637867853803,
    "duration" : 4820
  },
  "description" : "",
  "descriptionHtml" : "",
  "status" : "broken",
  "statusMessage" : "Returned error: HTTPConnectionPool(host='test-solana', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f437fdbdd30>: Failed to establish a new connection: [Errno 99] Cannot assign requested address'))",
  "statusTrace" : "Error: Returned error: HTTPConnectionPool(host='test-solana', port=8899): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f437fdbdd30>: Failed to establish a new connection: [Errno 99] Cannot assign requested address'))\n                    at Context.<anonymous> (test/token/ERC20/extensions/ERC20Burnable.test.js:15:45)\n                    at processImmediate (node:internal/timers:464:21)",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "OpenZeppelin contracts"
  }, {
    "name" : "suite",
    "value" : "Contract: ERC20Burnable burnFrom on success for a zero amount"
  }, {
    "name" : "testClass",
    "value" : "Contract: ERC20Burnable burnFrom on success for a zero amount"
  }, {
    "name" : "testMethod",
    "value" : "burns the requested amount"
  }, {
    "name" : "package",
    "value" : "Contract: ERC20Burnable burnFrom on success for a zero amount"
  }, {
    "name" : "resultFormat",
    "value" : "allure1"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 4,
        "unknown" : 0,
        "total" : 5
      },
      "items" : [ {
        "uid" : "20a955e41d5fb11d",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/5//#testresult/20a955e41d5fb11d",
        "status" : "passed",
        "time" : {
          "start" : 1637742360380,
          "stop" : 1637742371999,
          "duration" : 11619
        }
      }, {
        "uid" : "a7c82e6f6309fefe",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/23//#testresult/a7c82e6f6309fefe",
        "status" : "passed",
        "time" : {
          "start" : 1637700079523,
          "stop" : 1637700124060,
          "duration" : 44537
        }
      }, {
        "uid" : "3feb2c9b39acc093",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/22//#testresult/3feb2c9b39acc093",
        "status" : "passed",
        "time" : {
          "start" : 1637667820366,
          "stop" : 1637667831975,
          "duration" : 11609
        }
      }, {
        "uid" : "d8d3ef9e980875b8",
        "reportUrl" : "https://apetrovskiy.github.io/neon-compatibility/16//#testresult/d8d3ef9e980875b8",
        "status" : "passed",
        "time" : {
          "start" : 1637334539745,
          "stop" : 1637334550177,
          "duration" : 10432
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "e8ee8d2755ae2544.json",
  "parameterValues" : [ ]
}